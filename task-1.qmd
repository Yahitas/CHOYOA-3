---
title: "Task 1"
format: html
editor: visual
---

# Getting Started

```{r}
#importing library 
library(ggplot2)
library(tibble)
```

```{r}
#viewing data frame 
mpg
```

```{r}
# displaying data frame through a plot 
mpg %>% 
  ggplot(aes(displ, hwy, colour = drv)) + 
  geom_point()
```

```{r}
#displaying the data through the vary size of dots 
mpg %>% 
  ggplot(aes(displ, hwy, colour = drv, size = cyl)) + 
  geom_point(show.legend = FALSE) + 
  theme_void() + 
  scale_color_brewer()
```

```{r}
# introduce the function "scale_color_brewer" 
mpg %>% 
  ggplot(aes(displ, hwy, colour = drv)) + 
  geom_point(show.legend = FALSE, size = 4) + 
  geom_point(show.legend = FALSE, size = 1, colour = "#222222") + 
  coord_polar() + 
  theme_void() + 
  scale_color_brewer()
```

```{r}
#instead of using mpg, data frame, we can create our own 
# the command set.seed(), ensures that the pseudorandom number will always generate the same 
set.seed(1)
n <- 50
dat <- tibble(
  x0 = runif(n),
  y0 = runif(n),
  x1 = x0 + runif(n, min = -.2, max = .2),
  y1 = y0 + runif(n, min = -.2, max = .2),
  shade = runif(n), 
  size = runif(n)
)

dat # generated data frame is called dat 
```

```{r}
# same setup as mpg dataframe but this is with the randomly generated data
dat %>% 
  ggplot(aes(
    x = x0,
    y = y0,
    xend = x1,
    yend = y1,
    colour = shade,
    size = size
  )) +
  geom_segment(show.legend = FALSE) +
  coord_polar() +
  scale_y_continuous(expand = c(0, 0)) +
  scale_x_continuous(expand = c(0, 0)) + 
  scale_color_viridis_c() + 
  scale_size(range = c(0, 10)) + 
  theme_void()
```

## Technique

```{r}
# polar_art is a command used to create many art pieces that are in the same style
polar_art <- function(seed, n, palette) {
  
  # set the state of the random number generator
  set.seed(seed)
  
  # data frame containing random values for 
  # aesthetics we might want to use in the art
  dat <- tibble(
    x0 = runif(n),
    y0 = runif(n),
    x1 = x0 + runif(n, min = -.2, max = .2),
    y1 = y0 + runif(n, min = -.2, max = .2),
    shade = runif(n), 
    size = runif(n)
  )
  
  # plot segments in various colours, using 
  # polar coordinates and a gradient palette
  dat |> 
    ggplot(aes(
      x = x0,
      y = y0,
      xend = x1,
      yend = y1,
      colour = shade,
      size = size
    )) +
    geom_segment(show.legend = FALSE) +
    coord_polar() +
    scale_y_continuous(expand = c(0, 0)) +
    scale_x_continuous(expand = c(0, 0)) + 
    scale_colour_gradientn(colours = palette) + 
    scale_size(range = c(0, 10)) + 
    theme_void()
}
```

```{r}
# with the polar_art function, by changing the settings inside, you can generate any plot style 
polar_art(seed = 1, n = 500, palette = c("antiquewhite", "orange", "bisque"))

polar_art(seed = 1, n = 500, palette = c("red", "black", "white"))

polar_art(seed = 2, n = 50, palette = c("red", "black", "white"))

```

## Colour

```{r}
library(scales)
library(ggthemes)
```

```{r}
# incorperating new colors 
pal <- c("#cdb4db", "#ffc8dd", "#ffafcc", "#bde0fe", "#a2d2ff")
show_col(pal)
```

```{r}
# this displays the color's label
palette_fn <- colorRampPalette(pal)
```

```{r}
palette_fn(100)
```

```{r}
image(
  x = matrix(1:100, ncol = 1), 
  col = palette_fn(100),
  useRaster = TRUE,
  axes = FALSE
)
```

```{r}
canva_palettes[[101]]
```

```{r}
show_col(canva_palettes[[101]])
```

```{r}
#sample_canva is a function that samples palettes at random 
sample_canva <- function(seed = NULL) {
  if(!is.null(seed)) set.seed(seed)
  sample(ggthemes::canva_palettes, 1)[[1]]
}
```

```{r}
# example using the function polar_art and sample_canva
polar_art(seed = 2, n = 100, palette = sample_canva(seed = 2))

polar_art(seed = 2, n = 100, palette = sample_canva(seed = 3))

polar_art(seed = 2, n = 100, palette = sample_canva(seed = 4))
```

## Composition

```{r}
# the function polar_art is not the flexible, so we can use sample_data instead
sample_data <- function(seed = NULL, n = 100){
  if(!is.null(seed)) set.seed(seed)
  dat <- tibble(
    x0 = runif(n),
    y0 = runif(n),
    x1 = x0 + runif(n, min = -.2, max = .2),
    y1 = y0 + runif(n, min = -.2, max = .2),
    shade = runif(n), 
    size = runif(n),
    shape = factor(sample(0:22, size = n, replace = TRUE))
  )
}
```

```{r}
#the function styled_plot() helps take a palette and data set as inputs and sets up the mapping and the stylistic aspects to the plot
polar_styled_plot <- function(data = NULL, palette) {
  ggplot(
    data = data,
    mapping = aes(
      x = x0,
      y = y0,
      xend = x1,
      yend = y1,
      colour = shade,
      size = size
    )) + 
    coord_polar(clip = "off") +
    scale_y_continuous(
      expand = c(0, 0),
      limits = c(0, 1), 
      oob = scales::oob_keep
    ) +
    scale_x_continuous(
      expand = c(0, 0), 
      limits = c(0, 1), 
      oob = scales::oob_keep
    ) + 
    scale_colour_gradientn(colours = palette) + 
    scale_size(range = c(0, 10)) + 
    theme_void() + 
    guides(
      colour = guide_none(),
      size = guide_none(),
      fill = guide_none(),
      shape = guide_none()
    )
}
```

```{r}
#compared to the code above, the code below is much cleaner 
# the function sample_canva() does the work of generating random palettes 
# the function sample_data() does the job of creating random data to drive the plot 
# the funnction polar_styled_plot() takes care of all the gglot setup 
dat <- sample_data(n = 100, seed = 1) 
pal <- sample_canva(seed = 1)

polar_styled_plot(data = dat, palette = pal) + geom_segment()
polar_styled_plot(data = dat, palette = pal) + geom_path()
polar_styled_plot(data = dat, palette = pal) + geom_point()
```

```{r}
# by incorporating the polar_styled_plot() we can now add more layers 

library(dplyr)

dat1 <- sample_data(n = 2000, seed = 123) 
dat2 <- sample_data(n = 100, seed = 456) |>  
  mutate(y0 = .3 + y0 * .6, y1 = .3)

polar_styled_plot(palette = sample_canva(seed = 7)) + 
  geom_segment(
    data = dat1 |> mutate(size = size * 3)
  ) + 
  geom_segment(
    data = dat2 |> mutate(size = size / 5), 
    lineend = "round", 
    colour = "white"
  ) +
  geom_segment(
    data = dat2 |> mutate(size = size / 40), 
    lineend = "round", 
    colour = "#222222"
  ) +
  geom_point(
    data = dat2 |> mutate(size = size * 2),
    colour = "#222222"
  )
```

```{r}
# this is the last line of code in. 
# this displays the a clean code with using the function polar_styled_plot()
dat <- sample_data(n = 1000, seed = 1) |>
  mutate(y1 = y0, size = size / 4)

polar_styled_plot(palette = sample_canva(seed = 2)) + 
  geom_segment(data = dat, linetype = "331311") 
```
